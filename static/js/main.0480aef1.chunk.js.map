{"version":3,"sources":["pages/Employeedata.js","App.js","serviceWorker.js","index.js"],"names":["Employeedata","state","staff","componentDidMount","axios","get","then","response","apidata","data","results","employeedirectory","i","length","name","title","first","last","email","cell","location","city","push","setState","console","log","template","columns","label","field","sort","width","rows","this","React","Component","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mUAoEeA,E,4MA/DXC,MAAQ,CACJC,MAAO,I,EAEXC,kBAAoB,WACpBC,IAAMC,IAAI,iDACJC,MAAK,SAACC,GAIJ,IAFA,IAAIC,EAAUD,EAASE,KAAKC,QACxBC,EAAoB,GACfC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAAK,CACrC,IAAIH,EAAO,CACPK,KAAMN,EAAQI,GAAGE,KAAKC,MAAQ,KAAOP,EAAQI,GAAGE,KAAKE,MAAQ,IAAMR,EAAQI,GAAGE,KAAKG,KACnFC,MAAOV,EAAQI,GAAGM,MAClBC,KAAMX,EAAQI,GAAGO,KACjBC,SAAUZ,EAAQI,GAAGQ,SAASC,KAAO,KAAOb,EAAQI,GAAGQ,SAASnB,OAEpEU,EAAkBW,KAAKb,GAG3B,EAAKc,SAAS,CAACrB,MAAOS,IACtBa,QAAQC,IAAI,EAAKxB,MAAMC,W,uDAI3B,IAAMwB,EAAW,CACbC,QAAS,CACL,CACIC,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAEX,CACIH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,MAGfC,KAAMC,KAAKhC,MAAMC,OAErB,OACI,6BACI,yCACA,kBAAC,IAAD,CAAcO,KAAQiB,S,GAzDXQ,IAAMC,W,MCiClBC,MA7Bf,WACE,OACE,yBAAKC,UAAU,aACb,iDACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.0480aef1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {MDBDataTable} from \"mdbreact\"\r\n\r\nclass Employeedata extends React.Component {\r\n    state = {\r\n        staff: []\r\n    }\r\n    componentDidMount = () => {\r\n    axios.get(\"https://randomuser.me/api/?results=200&nat=us\"\r\n        ).then((response) => {\r\n            //console.log(response)\r\n            var apidata = response.data.results\r\n            var employeedirectory = []\r\n            for (let i = 0; i < apidata.length; i++) {\r\n                let data = {\r\n                    name: apidata[i].name.title + \". \" + apidata[i].name.first + \" \" + apidata[i].name.last,\r\n                    email: apidata[i].email,\r\n                    cell: apidata[i].cell,\r\n                    location: apidata[i].location.city + \", \" + apidata[i].location.state\r\n                }\r\n                employeedirectory.push(data)\r\n            }\r\n            //console.log(employeedirectory)\r\n            this.setState({staff: employeedirectory})\r\n            console.log(this.state.staff)\r\n        })\r\n    }\r\n    render() {\r\n        const template = {\r\n            columns: [\r\n                {\r\n                    label: \"name\",\r\n                    field: \"name\",\r\n                    sort: \"asc\",\r\n                    width: 250\r\n                },\r\n                {\r\n                    label: \"email\",\r\n                    field: \"email\",\r\n                    sort: \"asc\",\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: \"cell\",\r\n                    field: \"cell\",\r\n                    sort: \"asc\",\r\n                    width: 100\r\n                },\r\n                {\r\n                    label: \"location\",\r\n                    field: \"location\",\r\n                    sort: \"asc\",\r\n                    width: 250\r\n                }\r\n            ],\r\n            rows: this.state.staff\r\n        }\r\n        return (\r\n            <div>\r\n                <h6>Employees</h6>\r\n                <MDBDataTable data = {template}>\r\n                </MDBDataTable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Employeedata;","import React from 'react';\n//import logo from './logo.svg';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport Employeedata from \"./pages/Employeedata\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"directory\">\n      <h1>Faculty Directory</h1>\n      <Employeedata>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      </Employeedata>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}